
DC_Motor_EX1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000390  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067c  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include<avr/io.h>
#include<util/delay.h>


int main (void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//output pins
	DDRC|=(1<<PC0);// output 1
  74:	a4 e3       	ldi	r26, 0x34	; 52
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e4 e3       	ldi	r30, 0x34	; 52
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8c 93       	st	X, r24
	DDRC|=(1<<PC1); // output 2
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	8c 93       	st	X, r24
	PORTC&=~(1<<PC0) &~(1<<PC1);
  90:	a5 e3       	ldi	r26, 0x35	; 53
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e5 e3       	ldi	r30, 0x35	; 53
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8c 7f       	andi	r24, 0xFC	; 252
  9c:	8c 93       	st	X, r24

	// input pins
	DDRA&=~(1<<PA0);// Clock wise
  9e:	aa e3       	ldi	r26, 0x3A	; 58
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ea e3       	ldi	r30, 0x3A	; 58
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8c 93       	st	X, r24
	DDRA&=~(1<<PA1); // Anti Clock wise
  ac:	aa e3       	ldi	r26, 0x3A	; 58
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	ea e3       	ldi	r30, 0x3A	; 58
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	8c 93       	st	X, r24
	DDRA&=~(1<<PA2); // Stop
  ba:	aa e3       	ldi	r26, 0x3A	; 58
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8c 93       	st	X, r24


	while(1){

		if(PINA&(1<<PA0)){
  c8:	e9 e3       	ldi	r30, 0x39	; 57
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	81 70       	andi	r24, 0x01	; 1
  d4:	90 70       	andi	r25, 0x00	; 0
  d6:	88 23       	and	r24, r24
  d8:	79 f0       	breq	.+30     	; 0xf8 <main+0x8c>
			PORTC &=~(1<<PC0);
  da:	a5 e3       	ldi	r26, 0x35	; 53
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8c 93       	st	X, r24
			PORTC|=(1<<PC1);
  e8:	a5 e3       	ldi	r26, 0x35	; 53
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e5 e3       	ldi	r30, 0x35	; 53
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8c 93       	st	X, r24
  f6:	e8 cf       	rjmp	.-48     	; 0xc8 <main+0x5c>
		}
		else if(PINA&(1<<PA1)){
  f8:	e9 e3       	ldi	r30, 0x39	; 57
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	82 70       	andi	r24, 0x02	; 2
 104:	90 70       	andi	r25, 0x00	; 0
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	79 f0       	breq	.+30     	; 0x128 <main+0xbc>
			PORTC &=~(1<<PC1);
 10a:	a5 e3       	ldi	r26, 0x35	; 53
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e3       	ldi	r30, 0x35	; 53
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	8c 93       	st	X, r24
			PORTC|=(1<<PC0);
 118:	a5 e3       	ldi	r26, 0x35	; 53
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e3       	ldi	r30, 0x35	; 53
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	8c 93       	st	X, r24
 126:	d0 cf       	rjmp	.-96     	; 0xc8 <main+0x5c>
		}
		else if(PINA&(1<<PA2)){
 128:	e9 e3       	ldi	r30, 0x39	; 57
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	84 70       	andi	r24, 0x04	; 4
 134:	90 70       	andi	r25, 0x00	; 0
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	39 f2       	breq	.-114    	; 0xc8 <main+0x5c>
			PORTC&=~(1<<PC0) &~(1<<PC1);
 13a:	a5 e3       	ldi	r26, 0x35	; 53
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e5 e3       	ldi	r30, 0x35	; 53
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8c 7f       	andi	r24, 0xFC	; 252
 146:	8c 93       	st	X, r24
 148:	bf cf       	rjmp	.-130    	; 0xc8 <main+0x5c>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
