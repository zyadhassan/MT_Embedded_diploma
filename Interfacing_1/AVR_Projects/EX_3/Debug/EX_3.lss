
EX_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067d  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include<avr/io.h>
#include<util/delay.h>
#define F_CPU 16000000UL

void main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// Button 1 PORTB0
	DDRB&=~(1<<PB0);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24


	// Button 2 PORTB1
	DDRB&=~(1<<PB1) ;
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24

	// LED 1 PORTC0
	DDRC|=(1<<PC0);
  90:	a4 e3       	ldi	r26, 0x34	; 52
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	8c 93       	st	X, r24
	PORTC|=(1<<PC0); // LED 1 is OFF
  9e:	a5 e3       	ldi	r26, 0x35	; 53
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e5 e3       	ldi	r30, 0x35	; 53
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24

	// LED 2 PORTC1
	DDRC|=(1<<PC1);
  ac:	a4 e3       	ldi	r26, 0x34	; 52
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e4 e3       	ldi	r30, 0x34	; 52
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
	PORTC|=(1<<PC1); // LED 2 is OFF
  ba:	a5 e3       	ldi	r26, 0x35	; 53
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	8c 93       	st	X, r24

	while(1){
		if(PINB & (1<<PB0)){
  c8:	e6 e3       	ldi	r30, 0x36	; 54
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	81 70       	andi	r24, 0x01	; 1
  d4:	90 70       	andi	r25, 0x00	; 0
  d6:	88 23       	and	r24, r24
  d8:	41 f0       	breq	.+16     	; 0xea <main+0x7e>
			PORTC &= ~(1<<PC0);
  da:	a5 e3       	ldi	r26, 0x35	; 53
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8c 93       	st	X, r24
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <main+0x8c>

		}
		else{
			PORTC|=(1<<PC0);
  ea:	a5 e3       	ldi	r26, 0x35	; 53
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8c 93       	st	X, r24
		}
		if(PINB&(1<<PB1)){
  f8:	e6 e3       	ldi	r30, 0x36	; 54
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	82 70       	andi	r24, 0x02	; 2
 104:	90 70       	andi	r25, 0x00	; 0
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	41 f0       	breq	.+16     	; 0x11a <main+0xae>
			PORTC&=~(1<<PC1);
 10a:	a5 e3       	ldi	r26, 0x35	; 53
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e3       	ldi	r30, 0x35	; 53
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	8c 93       	st	X, r24
 118:	d7 cf       	rjmp	.-82     	; 0xc8 <main+0x5c>

		}
		else{
			PORTC|=(1<<PC1);
 11a:	a5 e3       	ldi	r26, 0x35	; 53
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e5 e3       	ldi	r30, 0x35	; 53
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24
 128:	cf cf       	rjmp	.-98     	; 0xc8 <main+0x5c>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
