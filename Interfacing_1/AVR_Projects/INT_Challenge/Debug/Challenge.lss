
Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001fa  2**0
                  ALLOC
  2 .stab         000003cc  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ac  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  74:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_INT2>:
#define F_CPU 1000000UL
#include<avr/io.h>
#include <avr/interrupt.h>
#include<util/delay.h>
int num=0;
void init_INT2(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRB&=~(1<<PB2);
  84:	a7 e3       	ldi	r26, 0x37	; 55
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e3       	ldi	r30, 0x37	; 55
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8b 7f       	andi	r24, 0xFB	; 251
  90:	8c 93       	st	X, r24
	SREG|=(1<<7);
  92:	af e5       	ldi	r26, 0x5F	; 95
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ef e5       	ldi	r30, 0x5F	; 95
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8c 93       	st	X, r24
	MCUCSR|=(1<<6);
  a0:	a4 e5       	ldi	r26, 0x54	; 84
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e4 e5       	ldi	r30, 0x54	; 84
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
	GICR|=(1<<5);
  ae:	ab e5       	ldi	r26, 0x5B	; 91
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	eb e5       	ldi	r30, 0x5B	; 91
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8c 93       	st	X, r24
}
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <__vector_3>:

ISR(INT2_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	if((PORTC&0x0F)<9){
  e2:	e5 e3       	ldi	r30, 0x35	; 53
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 2f       	mov	r24, r24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	90 70       	andi	r25, 0x00	; 0
  f0:	89 30       	cpi	r24, 0x09	; 9
  f2:	91 05       	cpc	r25, r1
  f4:	c4 f4       	brge	.+48     	; 0x126 <__vector_3+0x64>
		num++;
  f6:	80 91 60 00 	lds	r24, 0x0060
  fa:	90 91 61 00 	lds	r25, 0x0061
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	90 93 61 00 	sts	0x0061, r25
 104:	80 93 60 00 	sts	0x0060, r24
		PORTC=(PORTC&0xF0) | (num&0x0F);
 108:	a5 e3       	ldi	r26, 0x35	; 53
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e5 e3       	ldi	r30, 0x35	; 53
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	28 2f       	mov	r18, r24
 114:	20 7f       	andi	r18, 0xF0	; 240
 116:	80 91 60 00 	lds	r24, 0x0060
 11a:	90 91 61 00 	lds	r25, 0x0061
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	82 2b       	or	r24, r18
 122:	8c 93       	st	X, r24
 124:	12 c0       	rjmp	.+36     	; 0x14a <__vector_3+0x88>
	}
	else{
		num=0;
 126:	10 92 61 00 	sts	0x0061, r1
 12a:	10 92 60 00 	sts	0x0060, r1
		PORTC=(PORTC&0xF0) | (num&0x0F);
 12e:	a5 e3       	ldi	r26, 0x35	; 53
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e5 e3       	ldi	r30, 0x35	; 53
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	28 2f       	mov	r18, r24
 13a:	20 7f       	andi	r18, 0xF0	; 240
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	90 91 61 00 	lds	r25, 0x0061
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	82 2b       	or	r24, r18
 148:	8c 93       	st	X, r24
	}
}
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <main>:



int main(void){
 166:	df 93       	push	r29
 168:	cf 93       	push	r28
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	DDRC=0xFF;
 16e:	e4 e3       	ldi	r30, 0x34	; 52
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	80 83       	st	Z, r24
	PORTC=0x00;
 176:	e5 e3       	ldi	r30, 0x35	; 53
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	10 82       	st	Z, r1
	init_INT2();
 17c:	0e 94 3e 00 	call	0x7c	; 0x7c <init_INT2>
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x1a>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
