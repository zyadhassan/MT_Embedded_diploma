
TIMER_CH1_ETa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000380  2**0
                  ALLOC
  2 .stab         000004c8  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006d4  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  74:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_Timer0>:
unsigned char tick=0;
int num=0;



void init_Timer0(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62

	TCCR0=(1<<7)|(1<<2);
  84:	e3 e5       	ldi	r30, 0x53	; 83
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	84 e8       	ldi	r24, 0x84	; 132
  8a:	80 83       	st	Z, r24
	TCNT0=0;
  8c:	e2 e5       	ldi	r30, 0x52	; 82
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	TIMSK|=(1<<0);
  92:	a9 e5       	ldi	r26, 0x59	; 89
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e9 e5       	ldi	r30, 0x59	; 89
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
	SREG|=(1<<7);
  a0:	af e5       	ldi	r26, 0x5F	; 95
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8c 93       	st	X, r24

}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <__vector_11>:
// need 122 tick for 1 second as one tick over 256*32micro sec

ISR(TIMER0_OVF_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	tick++;
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 60 00 	sts	0x0060, r24
	if(tick==244){
  e8:	80 91 60 00 	lds	r24, 0x0060
  ec:	84 3f       	cpi	r24, 0xF4	; 244
  ee:	e9 f4       	brne	.+58     	; 0x12a <__vector_11+0x76>
		// incerment 7 segment
		if(num<9){
  f0:	80 91 61 00 	lds	r24, 0x0061
  f4:	90 91 62 00 	lds	r25, 0x0062
  f8:	89 30       	cpi	r24, 0x09	; 9
  fa:	91 05       	cpc	r25, r1
  fc:	54 f4       	brge	.+20     	; 0x112 <__vector_11+0x5e>
			num++;
  fe:	80 91 61 00 	lds	r24, 0x0061
 102:	90 91 62 00 	lds	r25, 0x0062
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 62 00 	sts	0x0062, r25
 10c:	80 93 61 00 	sts	0x0061, r24
 110:	04 c0       	rjmp	.+8      	; 0x11a <__vector_11+0x66>
		}
		else{
			num=0;
 112:	10 92 62 00 	sts	0x0062, r1
 116:	10 92 61 00 	sts	0x0061, r1
		}
		Decode(num);
 11a:	80 91 61 00 	lds	r24, 0x0061
 11e:	90 91 62 00 	lds	r25, 0x0062
 122:	0e 94 a8 00 	call	0x150	; 0x150 <Decode>
		tick=0;
 126:	10 92 60 00 	sts	0x0060, r1
	}
}
 12a:	cf 91       	pop	r28
 12c:	df 91       	pop	r29
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <Decode>:

void Decode(int n ){
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	00 d0       	rcall	.+0      	; 0x156 <Decode+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <Decode+0x8>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
	switch(n){
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	9a 81       	ldd	r25, Y+2	; 0x02
 164:	9c 83       	std	Y+4, r25	; 0x04
 166:	8b 83       	std	Y+3, r24	; 0x03
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	9c 81       	ldd	r25, Y+4	; 0x04
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	91 05       	cpc	r25, r1
 170:	09 f4       	brne	.+2      	; 0x174 <Decode+0x24>
 172:	6b c0       	rjmp	.+214    	; 0x24a <Decode+0xfa>
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	9c 81       	ldd	r25, Y+4	; 0x04
 178:	85 30       	cpi	r24, 0x05	; 5
 17a:	91 05       	cpc	r25, r1
 17c:	ec f4       	brge	.+58     	; 0x1b8 <Decode+0x68>
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	09 f4       	brne	.+2      	; 0x18a <Decode+0x3a>
 188:	45 c0       	rjmp	.+138    	; 0x214 <Decode+0xc4>
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	9c 81       	ldd	r25, Y+4	; 0x04
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	2c f4       	brge	.+10     	; 0x19e <Decode+0x4e>
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	99 f1       	breq	.+102    	; 0x202 <Decode+0xb2>
 19c:	8a c0       	rjmp	.+276    	; 0x2b2 <Decode+0x162>
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	91 05       	cpc	r25, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <Decode+0x5a>
 1a8:	3e c0       	rjmp	.+124    	; 0x226 <Decode+0xd6>
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	9c 81       	ldd	r25, Y+4	; 0x04
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	91 05       	cpc	r25, r1
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <Decode+0x66>
 1b4:	41 c0       	rjmp	.+130    	; 0x238 <Decode+0xe8>
 1b6:	7d c0       	rjmp	.+250    	; 0x2b2 <Decode+0x162>
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	9c 81       	ldd	r25, Y+4	; 0x04
 1bc:	87 30       	cpi	r24, 0x07	; 7
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <Decode+0x74>
 1c2:	5e c0       	rjmp	.+188    	; 0x280 <Decode+0x130>
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	9c 81       	ldd	r25, Y+4	; 0x04
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	91 05       	cpc	r25, r1
 1cc:	6c f4       	brge	.+26     	; 0x1e8 <Decode+0x98>
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	85 30       	cpi	r24, 0x05	; 5
 1d4:	91 05       	cpc	r25, r1
 1d6:	09 f4       	brne	.+2      	; 0x1da <Decode+0x8a>
 1d8:	41 c0       	rjmp	.+130    	; 0x25c <Decode+0x10c>
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	86 30       	cpi	r24, 0x06	; 6
 1e0:	91 05       	cpc	r25, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <Decode+0x96>
 1e4:	44 c0       	rjmp	.+136    	; 0x26e <Decode+0x11e>
 1e6:	65 c0       	rjmp	.+202    	; 0x2b2 <Decode+0x162>
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	91 05       	cpc	r25, r1
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <Decode+0xa4>
 1f2:	4f c0       	rjmp	.+158    	; 0x292 <Decode+0x142>
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	89 30       	cpi	r24, 0x09	; 9
 1fa:	91 05       	cpc	r25, r1
 1fc:	09 f4       	brne	.+2      	; 0x200 <Decode+0xb0>
 1fe:	51 c0       	rjmp	.+162    	; 0x2a2 <Decode+0x152>
 200:	58 c0       	rjmp	.+176    	; 0x2b2 <Decode+0x162>
	case 0:
		PORTA=(PORTA&~(0xFE)) |(0b01111110) ;
 202:	ab e3       	ldi	r26, 0x3B	; 59
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	eb e3       	ldi	r30, 0x3B	; 59
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	81 70       	andi	r24, 0x01	; 1
 20e:	8e 67       	ori	r24, 0x7E	; 126
 210:	8c 93       	st	X, r24
 212:	4f c0       	rjmp	.+158    	; 0x2b2 <Decode+0x162>
		break;
	case 1:
		PORTA=(PORTA&~(0xFE)) | (0x0C);
 214:	ab e3       	ldi	r26, 0x3B	; 59
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	eb e3       	ldi	r30, 0x3B	; 59
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	81 70       	andi	r24, 0x01	; 1
 220:	8c 60       	ori	r24, 0x0C	; 12
 222:	8c 93       	st	X, r24
 224:	46 c0       	rjmp	.+140    	; 0x2b2 <Decode+0x162>
		break;
	case 2:
		PORTA=(PORTA&~(0xFE)) |(0xB6) ;
 226:	ab e3       	ldi	r26, 0x3B	; 59
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	eb e3       	ldi	r30, 0x3B	; 59
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	81 70       	andi	r24, 0x01	; 1
 232:	86 6b       	ori	r24, 0xB6	; 182
 234:	8c 93       	st	X, r24
 236:	3d c0       	rjmp	.+122    	; 0x2b2 <Decode+0x162>
		break;
	case 3:
		PORTA=(PORTA&~(0xFE)) | (0x9E);
 238:	ab e3       	ldi	r26, 0x3B	; 59
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	eb e3       	ldi	r30, 0x3B	; 59
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	81 70       	andi	r24, 0x01	; 1
 244:	8e 69       	ori	r24, 0x9E	; 158
 246:	8c 93       	st	X, r24
 248:	34 c0       	rjmp	.+104    	; 0x2b2 <Decode+0x162>
		break;
	case 4:
		PORTA=(PORTA&~(0xFE)) | (0xCC);
 24a:	ab e3       	ldi	r26, 0x3B	; 59
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	eb e3       	ldi	r30, 0x3B	; 59
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 70       	andi	r24, 0x01	; 1
 256:	8c 6c       	ori	r24, 0xCC	; 204
 258:	8c 93       	st	X, r24
 25a:	2b c0       	rjmp	.+86     	; 0x2b2 <Decode+0x162>
		break;
	case 5:
		PORTA=(PORTA&~(0xFE)) | (0xDA);
 25c:	ab e3       	ldi	r26, 0x3B	; 59
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	eb e3       	ldi	r30, 0x3B	; 59
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	81 70       	andi	r24, 0x01	; 1
 268:	8a 6d       	ori	r24, 0xDA	; 218
 26a:	8c 93       	st	X, r24
 26c:	22 c0       	rjmp	.+68     	; 0x2b2 <Decode+0x162>
		break;
	case 6:
		PORTA=(PORTA&~(0xFE)) | (0xF8);
 26e:	ab e3       	ldi	r26, 0x3B	; 59
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	eb e3       	ldi	r30, 0x3B	; 59
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	88 6f       	ori	r24, 0xF8	; 248
 27c:	8c 93       	st	X, r24
 27e:	19 c0       	rjmp	.+50     	; 0x2b2 <Decode+0x162>
		break;
	case 7:
		PORTA=(PORTA&~(0xFE)) | (0x0E);
 280:	ab e3       	ldi	r26, 0x3B	; 59
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	eb e3       	ldi	r30, 0x3B	; 59
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	81 70       	andi	r24, 0x01	; 1
 28c:	8e 60       	ori	r24, 0x0E	; 14
 28e:	8c 93       	st	X, r24
 290:	10 c0       	rjmp	.+32     	; 0x2b2 <Decode+0x162>
		break;
	case 8:
		PORTA=(PORTA&~(0xFE)) | (0xFE);
 292:	ab e3       	ldi	r26, 0x3B	; 59
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	eb e3       	ldi	r30, 0x3B	; 59
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	8e 6f       	ori	r24, 0xFE	; 254
 29e:	8c 93       	st	X, r24
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <Decode+0x162>
		break;
	case 9:
		PORTA=(PORTA&~(0xFE)) | (0xDE);
 2a2:	ab e3       	ldi	r26, 0x3B	; 59
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	eb e3       	ldi	r30, 0x3B	; 59
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	8e 6d       	ori	r24, 0xDE	; 222
 2b0:	8c 93       	st	X, r24


return;


}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <main>:





int main(void){
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	 *
	 *  PD3 Push Button to decrement
	 *      0 --> ON , 1 --> OFF
	 *
	 * */
	DDRC|=(1<<PC6);
 2c8:	a4 e3       	ldi	r26, 0x34	; 52
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e4 e3       	ldi	r30, 0x34	; 52
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	8c 93       	st	X, r24
	PORTC|=(1<<PC6);
 2d6:	a5 e3       	ldi	r26, 0x35	; 53
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e5 e3       	ldi	r30, 0x35	; 53
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	8c 93       	st	X, r24
	init_Timer0();
 2e4:	0e 94 3e 00 	call	0x7c	; 0x7c <init_Timer0>

	/* 7 Segment connect to PA1 --> PA7 */
	DDRA=0xFE;
 2e8:	ea e3       	ldi	r30, 0x3A	; 58
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	8e ef       	ldi	r24, 0xFE	; 254
 2ee:	80 83       	st	Z, r24
	PORTA&=~(0xFE); // Set the portA to 0
 2f0:	ab e3       	ldi	r26, 0x3B	; 59
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	eb e3       	ldi	r30, 0x3B	; 59
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	8c 93       	st	X, r24
	Decode(0);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 a8 00 	call	0x150	; 0x150 <Decode>
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x46>

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
