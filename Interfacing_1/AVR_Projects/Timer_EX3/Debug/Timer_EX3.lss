
Timer_EX3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001bc  2**0
                  ALLOC
  2 .stab         000003cc  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006b1  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  74:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer0_init>:
#include<util/delay.h>
#include <avr/interrupt.h>

unsigned char tick=0;

void Timer0_init(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	TCCR0=(1<<7)|(1<<3)|(1<<CS02)|(1<<CS00);
  84:	e3 e5       	ldi	r30, 0x53	; 83
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8d e8       	ldi	r24, 0x8D	; 141
  8a:	80 83       	st	Z, r24
	TCNT0=0;
  8c:	e2 e5       	ldi	r30, 0x52	; 82
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	OCR0=250;
  92:	ec e5       	ldi	r30, 0x5C	; 92
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8a ef       	ldi	r24, 0xFA	; 250
  98:	80 83       	st	Z, r24
	TIMSK|=(1<<1);
  9a:	a9 e5       	ldi	r26, 0x59	; 89
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e9 e5       	ldi	r30, 0x59	; 89
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8c 93       	st	X, r24
	SREG|=(1<<7);
  a8:	af e5       	ldi	r26, 0x5F	; 95
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ef e5       	ldi	r30, 0x5F	; 95
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8c 93       	st	X, r24
}
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <__vector_10>:


ISR(TIMER0_COMP_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	tick++;
  da:	80 91 60 00 	lds	r24, 0x0060
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 60 00 	sts	0x0060, r24
	if(tick==32){
  e4:	80 91 60 00 	lds	r24, 0x0060
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	51 f4       	brne	.+20     	; 0x100 <__vector_10+0x44>
		//toggle led
		PORTC^=(1<<0);
  ec:	a5 e3       	ldi	r26, 0x35	; 53
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e5 e3       	ldi	r30, 0x35	; 53
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 27       	eor	r24, r25
  fa:	8c 93       	st	X, r24
		tick=0;
  fc:	10 92 60 00 	sts	0x0060, r1
	}
}
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main(void){
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	DDRC|=(1<<0);
 122:	a4 e3       	ldi	r26, 0x34	; 52
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e4 e3       	ldi	r30, 0x34	; 52
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	8c 93       	st	X, r24
	PORTC&=~(1<<0);
 130:	a5 e3       	ldi	r26, 0x35	; 53
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e5 e3       	ldi	r30, 0x35	; 53
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	8c 93       	st	X, r24
	Timer0_init();
 13e:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_init>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x28>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
